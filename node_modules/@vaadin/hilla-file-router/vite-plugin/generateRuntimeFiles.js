import { existsSync } from "node:fs";
import { mkdir, readFile, writeFile } from "node:fs/promises";
import collectRoutesFromFS from "./collectRoutesFromFS.js";
import createRoutesFromMeta from "./createRoutesFromMeta.js";
import createViewConfigJson from "./createViewConfigJson.js";
async function generateRuntimeFile(url, data) {
  await mkdir(new URL("./", url), { recursive: true });
  let contents;
  try {
    contents = await readFile(url, "utf-8");
  } catch (e) {
    if (!(e != null && typeof e === "object" && "code" in e && e.code === "ENOENT")) {
      throw e;
    }
  }
  if (contents !== data) {
    await writeFile(url, data, "utf-8");
  }
}
async function generateRuntimeFiles(viewsDir, urls, extensions, logger, debug) {
  const routeMeta = existsSync(viewsDir) ? await collectRoutesFromFS(viewsDir, { extensions, logger }) : [];
  if (debug) {
    logger.info("Collected file-based routes");
  }
  const runtimeRoutesCode = createRoutesFromMeta(routeMeta, urls);
  const viewConfigJson = await createViewConfigJson(routeMeta);
  await Promise.all([
    generateRuntimeFile(urls.json, viewConfigJson).then(() => {
      if (debug) {
        logger.info(`Frontend route list is generated: ${String(urls.json)}`);
      }
    }),
    generateRuntimeFile(urls.code, runtimeRoutesCode).then(() => {
      if (debug) {
        logger.info(`File Route module is generated: ${String(urls.code)}`);
      }
    })
  ]);
}
export {
  generateRuntimeFiles
};
//# sourceMappingURL=generateRuntimeFiles.js.map
